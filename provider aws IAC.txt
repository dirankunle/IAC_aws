provider "aws" {
  region = "us-east-1"
}

# 1. Create VPC
resource "aws_vpc" "Adekunle-vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "Adekunle VPC"
  }
}

# 2. Create Internet Gateway
resource "aws_internet_gateway" "Adekunle-gw" {
  vpc_id = aws_vpc.Adekunle-vpc.id

  tags = {
    Name = "Adekunle IGW"
  }
}

# 3. Create Custom Route Table
resource "aws_route_table" "Adekunle-route-table" {
  vpc_id = aws_vpc.Adekunle-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.Adekunle-gw.id
  }

  tags = {
    Name = "Adekunle Route Table"
  }
}

# 4. Create a Subnet
resource "aws_subnet" "subnet-1" {
  vpc_id            = aws_vpc.Adekunle-vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"

  tags = {
    Name = "Adekunle-subnet"
  }
}

# 5. Associate Subnet with Route Table
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.Adekunle-route-table.id
}

# 6. Create a Security Group to allow port 22, 80, 443
resource "aws_security_group" "webserver-sg" {
  name        = "allow_web_traffic"
  description = "Allow  inbound traffic from 22, 80, 443"
  vpc_id      = aws_vpc.Adekunle-vpc.id

  ingress {
    description = "Allow HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "allow_web_traffic"
  }
}
# 7. Create a Network Interface with an IP in the subnet that was created in step 4
resource "aws_network_interface" "webserver-nic" {
  subnet_id       = aws_subnet.subnet-1.id
  private_ips     = ["10.0.1.50"]
  security_groups = [aws_security_group.webserver-sg.id]

}

# 8. Assign an Elastic IP to the network interface created in step 7
resource "aws_eip" "Adekunle-eip" {
  domain                    = "vpc"
  network_interface         = aws_network_interface.webserver-nic.id
  associate_with_private_ip = "10.0.1.50"
  depends_on                = [aws_internet_gateway.Adekunle-gw]
}

# 9. Create an Ubuntu EC2 instance with the network interface created in step 7 and the security group created in step 6
resource "aws_instance" "Adekunleweb" {
  ami               = "ami-053b0d53c279acc90"
  instance_type     = "t3.micro"
  availability_zone = "us-east-1a"
  key_name          = "AdekunleT"

  network_interface {
    network_interface_id = aws_network_interface.webserver-nic.id
    device_index         = 0
  }

  user_data = <<-EOF
    #!/bin/bash
    sudo apt update -y
    sudo apt install apache2 -y
    sudo systemctl start apache2
    sudo bash -c 'echo Hello Adekunle Trainees > /var/www/html/index.html'
    EOF

  tags = {
    Name = "Adekunle Server"
  }
}








# resource "<provider>_<resource_type>" "name" {
#     config options..
#     key = "value"
#     key2 = "value2"
# }

